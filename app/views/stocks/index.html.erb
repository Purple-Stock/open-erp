<%- model_class = Stock -%>
<div class="section-header row-cols-2">
  <div class="page-header">
    <h1><%= t('stocks.two') %></h1>
  </div>
  <div class="d-flex justify-content-end">
    <%= button_to "Gerar Previsão de Venda", stocks_path(format: "csv"), class: "btn btn-success", method: :get %>
  </div>
</div>

<div class="form-group">
  <%= form_with(url: stocks_path, method: :get) do %>
    <%= select_tag "status", options_for_select([['Situação', ''], ['Ativo', 1], ['Inativo', 0]], @default_status_filter) %>
    <%= select_tag "balance_situation", options_for_select([['Saldo total', ''], ['Maior do que zero', 1], ['Igual a zero', 0], ['Menor do que zero', -1]], @default_situation_balance_filter) %>
    <%= text_field_tag "sku", @default_sku_filter, placeholder: "Filtrar por SKU" %>
    <%= submit_tag "Filtro", class: 'btn btn-primary' %>
  <% end %>
</div>

<div class="section-body">
  <div class="card">
    <div class="card-body">
      <%= turbo_frame_tag :stocks do %>
        <div class="table-responsive">
          <table id="stockTable" class="table table-striped">
            <thead>
            <tr>
              <th></th>
              <th><%= model_class.human_attribute_name(:id) %></th>
              <th><%= t('stocks.sku') %></th>
              <th><%= t('stocks.physical_balance') %></th>
              <th><%= t('stocks.in_production') %></th>
              <th><%= t('stocks.count_sold') %></th>
              <th><%= t('stocks.calculate_basic_forecast') %></th>
              <th><%= t('stocks.product') %></th>
              <th><%= t '.actions', :default => t("helpers.actions") %></th>
            </tr>
            </thead>
            <tbody>
            <% @stocks_with_data.each do |(stock, data)| %>
              <tr>
                <td>
                  <% if stock.balances.any? %>
                    <button class="btn btn-sm btn-outline-primary collapse-toggle" type="button" data-target="#collapse<%= stock.id %>">
                      +
                    </button>
                  <% end %>
                </td>
                <td><%= link_to stock.id, stock_path(stock), data: { toggle: 'tooltip', turbo: false } %></td>
                <td><%= stock.product.sku %></td>
                <td class="physical-balance"><%= data[:physical_balance] %></td>
                <td class="in-production"><%= data[:total_in_production] %></td>
                <td><%= data[:total_sold] %></td>
                <td class="forecast"><%= data[:total_forecast] %></td>
                <td><%= stock.product.name %></td>
                <td>
                  <%= link_to icon('fas fa-eye'), stock, title: t('show'), class: 'btn btn-info', data: { toggle: 'tooltip', turbo: false } %>
                </td>
              </tr>
              <% sao_paulo_base = stock.balances.find { |b| b.deposit_id.to_s == '9023657532' } %>
              <% if sao_paulo_base %>
                <tr class="collapse-row" id="collapse<%= stock.id %>" style="display: none;">
                  <td colspan="9" class="p-0">
                    <table class="table table-sm table-bordered mb-0">
                      <thead>
                        <tr>
                          <th>Apply Discount</th>
                          <th>Warehouse</th>
                          <th><%= t('stocks.physical_balance') %></th>
                          <th><%= t('stocks.total_virtual_balance') %></th>
                          <th><%= t('stocks.count_sold') %></th>
                          <th><%= t('stocks.calculate_basic_forecast') %></th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td>
                            <%= check_box_tag "discount_#{stock.id}_#{sao_paulo_base.deposit_id}", 1, stock.discounted_warehouse_sku_id == "#{sao_paulo_base.deposit_id}_#{stock.product.sku}", 
                                class: 'discount-checkbox',
                                data: { 
                                  stock_id: stock.id,
                                  warehouse_id: sao_paulo_base.deposit_id,
                                  sku: stock.product.sku
                                } %>
                          </td>
                          <td><%= @warehouses[sao_paulo_base.deposit_id.to_s] || "Estoque São Paulo Base" %></td>
                          <td class="physical-balance"><%= sao_paulo_base.physical_balance %></td>
                          <td class="virtual-balance"><%= sao_paulo_base.virtual_balance %></td>
                          <td><%= data[:total_sold] %></td>
                          <td><%= data[:total_forecast] %></td>
                        </tr>
                      </tbody>
                    </table>
                  </td>
                </tr>
              <% end %>
            <% end %>
            </tbody>
          </table>
          <%== pagy_bootstrap_nav(@pagy) %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<%= javascript_tag do %>
  document.addEventListener('turbo:load', function() {
    setupCollapseButtons();
    setupDiscountCheckboxes();
    applyInitialDiscounts();
  });

  document.addEventListener('turbo:render', function() {
    setupCollapseButtons();
    setupDiscountCheckboxes();
    applyInitialDiscounts();
  });

  function setupCollapseButtons() {
    const collapseButtons = document.querySelectorAll('.collapse-toggle');
    collapseButtons.forEach(button => {
      button.addEventListener('click', function() {
        const target = document.querySelector(this.dataset.target);
        if (target.style.display === 'none' || target.style.display === '') {
          target.style.display = 'table-row';
          this.textContent = '-';
        } else {
          target.style.display = 'none';
          this.textContent = '+';
        }
      });
    });
  }

  function applyInitialDiscounts() {
    const checkboxes = document.querySelectorAll('.discount-checkbox:checked');
    checkboxes.forEach(checkbox => {
      applyDiscount(checkbox, true, true);
    });
  }

  function setupDiscountCheckboxes() {
    const checkboxes = document.querySelectorAll('.discount-checkbox');
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        applyDiscount(this, this.checked, false);
      });
    });
  }

  function applyDiscount(checkbox, isApplying, isInitialLoad) {
    const row = checkbox.closest('tr');
    const physicalBalanceCell = row.querySelector('.physical-balance');
    const virtualBalanceCell = row.querySelector('.virtual-balance');
    const inProductionCell = row.querySelector('td:nth-child(5)');
    const soldQuantityCell = row.querySelector('td:nth-child(6)');
    const forecastCell = row.querySelector('td:nth-child(7)');
    
    let currentPhysicalBalance = parseInt(physicalBalanceCell.textContent);
    let currentVirtualBalance = parseInt(virtualBalanceCell.textContent);
    const inProduction = parseInt(inProductionCell.textContent);
    const soldQuantity = parseInt(soldQuantityCell.textContent);

    // Apply or remove the discount based on the checkbox state
    const discountAmount = isApplying ? -1000 : 1000;
    currentPhysicalBalance += discountAmount;
    currentVirtualBalance += discountAmount;

    physicalBalanceCell.textContent = currentPhysicalBalance;
    virtualBalanceCell.textContent = currentVirtualBalance;

    // Calculate new forecast
    const newForecast = Math.max(currentPhysicalBalance + inProduction - soldQuantity, 0);
    forecastCell.textContent = newForecast;

    // Update the main table row
    const mainRow = row.closest('.collapse-row').previousElementSibling;
    const mainPhysicalBalanceCell = mainRow.querySelector('.physical-balance');
    const mainForecastCell = mainRow.querySelector('td:nth-child(7)');
    mainPhysicalBalanceCell.textContent = currentPhysicalBalance;
    mainForecastCell.textContent = newForecast;

    // Only make the API call if the change was triggered by a user action
    if (!isInitialLoad) {
      updateServerState(checkbox, isApplying, currentPhysicalBalance, newForecast);
    }
  }

  function updateServerState(checkbox, isApplying, newPhysicalBalance, newForecast) {
    const stockId = checkbox.dataset.stockId;
    const warehouseId = checkbox.dataset.warehouseId;
    const sku = checkbox.dataset.sku;

    fetch(`/stocks/${stockId}/apply_discount`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ 
        warehouse_id: warehouseId, 
        sku: sku, 
        is_applying: isApplying,
        new_physical_balance: newPhysicalBalance,
        new_forecast: newForecast
      })
    })
    .then(response => response.json())
    .then(data => {
      if (!data.success) {
        console.error('Error updating server state:', data.error);
        // Optionally, revert the UI changes here if the server update fails
      }
    })
    .catch(error => console.error('Error:', error));
  }
<% end %>